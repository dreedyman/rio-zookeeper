package org.rioproject.zookeeper.service;

import org.apache.zookeeper.KeeperException;
import org.apache.zookeeper.ZooKeeper;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.rioproject.impl.fdh.FaultDetectionListener;
import org.rioproject.test.RioTestRunner;
import org.rioproject.test.SetTestManager;
import org.rioproject.test.TestManager;
import org.rioproject.zookeeper.ZooKeeperStarter;
import org.rioproject.zookeeper.client.ZooKeeperClient;
import org.rioproject.zookeeper.watcher.ZooKeeperServiceWatcher;

import java.io.IOException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Testing the Zookeeper service using the Rio test framework
 *
 * @author Generated by the Rio Archetype
 */
@RunWith(RioTestRunner.class)
public class ITZookeeperDeployTest {
	@SetTestManager
    static TestManager testManager;
    private final ZooKeeperStarter zooKeeperStarter = new ZooKeeperStarter();

    @Before
    public void setup() throws Exception {
        zooKeeperStarter.start();
	    Assert.assertNotNull(testManager);
        testManager.waitForDeployment(testManager.getDeployedOperationalStringManager());
    }

    @After
    public void tearDown() {
        zooKeeperStarter.stop(true);
    }

    @Test
    public void test1() throws IOException, InterruptedException, ExecutionException, KeeperException {
        String zNode1 = "/Zookeeper/Zookeeper:1";
        String zNode2 = "/Zookeeper/Zookeeper:2";
        String zNode3 = "/Zookeeper/Zookeeper:3";
        ZooKeeperClient client = new ZooKeeperClient();
        ZooKeeper zooKeeper = client.connect("127.0.0.1:"+zooKeeperStarter.getPort(), 3000).get();
        FDHL fdh1 = new FDHL();
        FDHL fdh2 = new FDHL();
        FDHL fdh3 = new FDHL();
        ZooKeeperServiceWatcher zw2 = new ZooKeeperServiceWatcher(zooKeeper);
        zooKeeper.register(zw2);
        zw2.addService(zNode1, fdh1);
        zw2.addService(zNode2, fdh2);
        zw2.addService(zNode3, fdh3);
        Thread.sleep(TimeUnit.SECONDS.toMillis(1));
        /*for(Process process : testManager.getProcesses())
            process.destroy();*/
        testManager.undeploy("Zookeeper");
        int waited = 0;
        while(waited<10) {
            if(fdh1.called.get() && fdh2.called.get() && fdh3.called.get())
                break;
            Thread.sleep(1000);
            waited++;
        }
        Assert.assertTrue(fdh1.called.get());
        Assert.assertTrue(fdh2.called.get());
        Assert.assertTrue(fdh3.called.get());
    }

    class FDHL implements FaultDetectionListener<String> {
        AtomicBoolean called = new AtomicBoolean(false);

        public void serviceFailure(Object o, String s) {
            called.set(true);
            System.out.println("======================================\nService "+s+" FAILED\n======================================");
        }
    }
}
